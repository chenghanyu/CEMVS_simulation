N <- dim(Ycube)[2]
Ssq_sum <- 0
XX_sum <- 0
dd_sum <- 0
Yre <- Ycube[1:(n), , ]
Yim <- Ycube[-c(1:(n)), , ]
#     if (v0 > 0) {
#         if (pp > 0) {
#             X_gamma = data.matrix(X)
#             XtX = t(X_gamma) %*% X_gamma
#             # X_gamma = data.matrix(X[, gamma == 1])
#             for (j in 1:N) {
#                 for (i in 1:N) {
#                     XtY = t(X_gamma) %*% Y[ , i, j]
#                     dd <- (1 - Gamma[, i, j]) * v0 + Gamma[, i, j] * v1
#                     X_tilde = rbind(X_gamma, sqrt(1 / dd))
#                     aux = M_beta(XtY, X_gamma, Y[, i, j], XtX,
#                                  d_star = rep(1 / dd, 2))
#                     Ssq = t(Y[, i, j]) %*% Y[, i, j] - t(XtY) %*% aux
#                     Ssq_sum = Ssq_sum + Ssq
#                     xx = (-0.5) * as.numeric(
#                         determinant(t(as.matrix(X_tilde)) %*% as.matrix(X_tilde),
#                                     logarithm = TRUE)$modulus)
#                     XX_sum = XX_sum + xx
#                     ddd =  -(1/2) * sum(log(rep(dd, 2)))
#                     dd_sum = dd_sum + ddd
#                 }
#             }
#             value = XX_sum + dd_sum  - (0.5) * (N ^ 2 * n + eta) *
#                 log(eta * lambda + Ssq_sum)
#             value = value + log_prior(Gamma, a, b, length(Gamma))
#         }
#     }
if (v0 == 0) {
b1 <- Mod(lam1) ^ 2 / (Mod(omega1) ^ 2 - Mod(lam1) ^ 2)
if (length(dim(Active)) == 2) Active <- array(Active, dim = c(q, N, N))
if (length(dim(p_star_mat)) == 2) p_star_mat <- array(p_star_mat, dim = c(q, N, N))
#         omega1 <- 2 * v1
#         lam1 <- 2i * v1 * slab.cor
for (j in 1:N) {
for (i in 1:N) {
no.active <- sum(Active[, i, j])
if (no.active > 0) {
x <- X[1:n, 1:q]
x_act <- data.matrix(as.matrix(x)[, Active[, i, j] == 1])
X_act <- data.matrix(X[, rep(Active[, i, j], 2) == 1])
XtYre <- crossprod(x_act, Yre[, i, j])
XtYim <- crossprod(x_act, Yim[, i, j])
# print("here")
# Dv <- create_Dmat_noncir(lam0, lam1, omega0, omega1, b0, b1,
#                          p_star = p_star_mat[,i, j])
Dv <- create_Dmat_noncir_cpp(lam0, lam1, omega0, omega1, b0, b1,
p_star_mat[,i, j])
# print("here")
# print(paste("Dv", Dv))
Gv <- create_Gmat_noncir_cpp(lam0, lam1, omega0, omega1, b0, b1,
p_star_mat[,i, j])
# print("here")
# print(paste("Gv", Gv))
# print("here")
XtX.cv <- crossprod(x_act)
regcoef <- M_beta_noncir(XtYre, XtYim, XtX.cv, Dv, Re(Gv), Im(Gv))
XtY <- crossprod(X_act, Ycube[, i, j])
# print(paste("XtY", XtY))
# print(regcoef)
Ssq <- crossprod(Ycube[, i, j]) - crossprod(XtY, c(Re(regcoef), Im(regcoef)))
# print(paste("crossprod(Y[, i, j] ", crossprod(Y[, i, j])))
# print(paste("crossprod(XtY, c(Re(regcoef), Im(regcoef)) ",
# crossprod(XtY, c(Re(regcoef), Im(regcoef)))))
# print(paste("Ssq ", Ssq))
Ssq_sum <- Ssq_sum + Ssq
# print(paste("Ssq_sum  ",Ssq_sum ))
XtX <- crossprod(X_act)
# print(XtX)
#                     cplx_to_real_cov <- function(Omega, Lam) {
#                         Vrr <- (0.5) * Re(Omega + Lam)
#                         Vii <- (0.5) * Re(Omega - Lam)
#                         Vri <- (0.5) * Im(-Omega + Lam)
#                         Vir <- (0.5) * Im(Omega + Lam)
#                         return(rbind(cbind(Vrr, Vri), cbind(Vir, Vii)))
#                     }
#
Sig.real <- cplx_to_real_cov(Omega = omega1, Lam = lam1)
# print(Sig.real)
# Dinv <- chol2inv(chol(D))
det.value <- (-0.5) * as.numeric(
determinant(XtX + chol2inv(chol(Sig.real)),
logarithm = TRUE)$modulus)
# print(paste("det.value  ", det.value))
XX_sum <- XX_sum + det.value
ddd <- (-0.5) * as.numeric(determinant(Sig.real,
logarithm = TRUE)$modulus)
# print(paste("ddd ",ddd))
dd_sum <- dd_sum + ddd
} else {
Ssq <- crossprod(Ycube[, i, j])
# print(paste("Ssq ", Ssq))
Ssq_sum <- Ssq_sum + Ssq
# print(paste("Ssq_sum  ",Ssq_sum ))
}
}
}
# print(paste("Ssq_sum  ",Ssq_sum))
print(paste("XX_sum  ", XX_sum))
# print(paste("dd_sum  ", dd_sum))
value <- XX_sum + dd_sum - ((0.5) * (N ^ 2 * nn) + a_sig) *
log(b_sig + Ssq_sum)
#         value <- XX_sum + dd_sum -  (N ^ 2 * n + a_sig) *
#             log(b_sig + .5 * Ssq_sum)
value <- value + log_prior(Active, a, b, length(Active))
# print(paste("log_prior  ", log_prior(Active, a, b, length(Active))))
}
return(value)
}
sim2.em.cpp <- EM_spikecir_cpp_full(X.cplx, Y.cv, v0s, v1 = 1, epsilon = epsilon,
a_th = 1, b_th = 1, thre = thre[1],
spike.cor = 0, slab.cor = 0)
sourceCpp("./CVEMVS/rcpp/EM_spikecir_main_cpp.cpp")
sim2.em.cpp <- EM_spikecir_cpp_full(X.cplx, Y.cv, v0s, v1 = 1, epsilon = epsilon,
a_th = 1, b_th = 1, thre = thre[1],
spike.cor = 0, slab.cor = 0)
log_g_sig_noncir <- function(Active, X, Ycube, a_sig, b_sig, p_star_mat,
lam0, lam1, omega0, omega1, b0, b1, a, b, v0) {
# D is a 2p by 2p matrix
# Assume R = I
# Gamma: q * N * N
# Y: 3d array
qq <- ncol(X)
q <- qq / 2
nn <- nrow(X)
n <- nn / 2
N <- dim(Ycube)[2]
Ssq_sum <- 0
XX_sum <- 0
dd_sum <- 0
Yre <- Ycube[1:(n), , ]
Yim <- Ycube[-c(1:(n)), , ]
#     if (v0 > 0) {
#         if (pp > 0) {
#             X_gamma = data.matrix(X)
#             XtX = t(X_gamma) %*% X_gamma
#             # X_gamma = data.matrix(X[, gamma == 1])
#             for (j in 1:N) {
#                 for (i in 1:N) {
#                     XtY = t(X_gamma) %*% Y[ , i, j]
#                     dd <- (1 - Gamma[, i, j]) * v0 + Gamma[, i, j] * v1
#                     X_tilde = rbind(X_gamma, sqrt(1 / dd))
#                     aux = M_beta(XtY, X_gamma, Y[, i, j], XtX,
#                                  d_star = rep(1 / dd, 2))
#                     Ssq = t(Y[, i, j]) %*% Y[, i, j] - t(XtY) %*% aux
#                     Ssq_sum = Ssq_sum + Ssq
#                     xx = (-0.5) * as.numeric(
#                         determinant(t(as.matrix(X_tilde)) %*% as.matrix(X_tilde),
#                                     logarithm = TRUE)$modulus)
#                     XX_sum = XX_sum + xx
#                     ddd =  -(1/2) * sum(log(rep(dd, 2)))
#                     dd_sum = dd_sum + ddd
#                 }
#             }
#             value = XX_sum + dd_sum  - (0.5) * (N ^ 2 * n + eta) *
#                 log(eta * lambda + Ssq_sum)
#             value = value + log_prior(Gamma, a, b, length(Gamma))
#         }
#     }
if (v0 == 0) {
b1 <- Mod(lam1) ^ 2 / (Mod(omega1) ^ 2 - Mod(lam1) ^ 2)
if (length(dim(Active)) == 2) Active <- array(Active, dim = c(q, N, N))
if (length(dim(p_star_mat)) == 2) p_star_mat <- array(p_star_mat, dim = c(q, N, N))
#         omega1 <- 2 * v1
#         lam1 <- 2i * v1 * slab.cor
for (j in 1:N) {
for (i in 1:N) {
no.active <- sum(Active[, i, j])
if (no.active > 0) {
x <- X[1:n, 1:q]
x_act <- data.matrix(as.matrix(x)[, Active[, i, j] == 1])
X_act <- data.matrix(X[, rep(Active[, i, j], 2) == 1])
XtYre <- crossprod(x_act, Yre[, i, j])
XtYim <- crossprod(x_act, Yim[, i, j])
# print("here")
# Dv <- create_Dmat_noncir(lam0, lam1, omega0, omega1, b0, b1,
#                          p_star = p_star_mat[,i, j])
Dv <- create_Dmat_noncir_cpp(lam0, lam1, omega0, omega1, b0, b1,
p_star_mat[,i, j])
# print("here")
# print(paste("Dv", Dv))
Gv <- create_Gmat_noncir_cpp(lam0, lam1, omega0, omega1, b0, b1,
p_star_mat[,i, j])
# print("here")
# print(paste("Gv", Gv))
# print("here")
XtX.cv <- crossprod(x_act)
regcoef <- M_beta_noncir(XtYre, XtYim, XtX.cv, Dv, Re(Gv), Im(Gv))
XtY <- crossprod(X_act, Ycube[, i, j])
# print(paste("XtY", XtY))
# print(regcoef)
Ssq <- crossprod(Ycube[, i, j]) - crossprod(XtY, c(Re(regcoef), Im(regcoef)))
# print(paste("crossprod(Y[, i, j] ", crossprod(Y[, i, j])))
# print(paste("crossprod(XtY, c(Re(regcoef), Im(regcoef)) ",
# crossprod(XtY, c(Re(regcoef), Im(regcoef)))))
# print(paste("Ssq ", Ssq))
Ssq_sum <- Ssq_sum + Ssq
# print(paste("Ssq_sum  ",Ssq_sum ))
XtX <- crossprod(X_act)
# print(XtX)
#                     cplx_to_real_cov <- function(Omega, Lam) {
#                         Vrr <- (0.5) * Re(Omega + Lam)
#                         Vii <- (0.5) * Re(Omega - Lam)
#                         Vri <- (0.5) * Im(-Omega + Lam)
#                         Vir <- (0.5) * Im(Omega + Lam)
#                         return(rbind(cbind(Vrr, Vri), cbind(Vir, Vii)))
#                     }
#
Sig.real <- cplx_to_real_cov(Omega = omega1, Lam = lam1)
# print(Sig.real)
# Dinv <- chol2inv(chol(D))
det.value <- (-0.5) * as.numeric(
determinant(XtX + chol2inv(chol(Sig.real)),
logarithm = TRUE)$modulus)
# print(paste("det.value  ", det.value))
XX_sum <- XX_sum + det.value
ddd <- (-0.5) * as.numeric(determinant(Sig.real,
logarithm = TRUE)$modulus)
# print(paste("ddd ",ddd))
dd_sum <- dd_sum + ddd
} else {
Ssq <- crossprod(Ycube[, i, j])
# print(paste("Ssq ", Ssq))
Ssq_sum <- Ssq_sum + Ssq
# print(paste("Ssq_sum  ",Ssq_sum ))
}
}
}
# print(paste("Ssq_sum  ",Ssq_sum))
print(paste("XX_sum  ", XX_sum))
# print(paste("dd_sum  ", dd_sum))
value <- XX_sum + dd_sum - ((0.5) * (N ^ 2 * nn) + a_sig) *
log(b_sig + Ssq_sum)
print(paste("value  ", value))
#         value <- XX_sum + dd_sum -  (N ^ 2 * n + a_sig) *
#             log(b_sig + .5 * Ssq_sum)
value <- value + log_prior(Active, a, b, length(Active))
# print(paste("log_prior  ", log_prior(Active, a, b, length(Active))))
}
return(value)
}
sim2.em.cpp <- EM_spikecir_cpp_full(X.cplx, Y.cv, v0s, v1 = 1, epsilon = epsilon,
a_th = 1, b_th = 1, thre = thre[1],
spike.cor = 0, slab.cor = 0)
log_g_sig_noncir <- function(Active, X, Ycube, a_sig, b_sig, p_star_mat,
lam0, lam1, omega0, omega1, b0, b1, a, b, v0) {
# D is a 2p by 2p matrix
# Assume R = I
# Gamma: q * N * N
# Y: 3d array
qq <- ncol(X)
q <- qq / 2
nn <- nrow(X)
n <- nn / 2
N <- dim(Ycube)[2]
Ssq_sum <- 0
XX_sum <- 0
dd_sum <- 0
Yre <- Ycube[1:(n), , ]
Yim <- Ycube[-c(1:(n)), , ]
#     if (v0 > 0) {
#         if (pp > 0) {
#             X_gamma = data.matrix(X)
#             XtX = t(X_gamma) %*% X_gamma
#             # X_gamma = data.matrix(X[, gamma == 1])
#             for (j in 1:N) {
#                 for (i in 1:N) {
#                     XtY = t(X_gamma) %*% Y[ , i, j]
#                     dd <- (1 - Gamma[, i, j]) * v0 + Gamma[, i, j] * v1
#                     X_tilde = rbind(X_gamma, sqrt(1 / dd))
#                     aux = M_beta(XtY, X_gamma, Y[, i, j], XtX,
#                                  d_star = rep(1 / dd, 2))
#                     Ssq = t(Y[, i, j]) %*% Y[, i, j] - t(XtY) %*% aux
#                     Ssq_sum = Ssq_sum + Ssq
#                     xx = (-0.5) * as.numeric(
#                         determinant(t(as.matrix(X_tilde)) %*% as.matrix(X_tilde),
#                                     logarithm = TRUE)$modulus)
#                     XX_sum = XX_sum + xx
#                     ddd =  -(1/2) * sum(log(rep(dd, 2)))
#                     dd_sum = dd_sum + ddd
#                 }
#             }
#             value = XX_sum + dd_sum  - (0.5) * (N ^ 2 * n + eta) *
#                 log(eta * lambda + Ssq_sum)
#             value = value + log_prior(Gamma, a, b, length(Gamma))
#         }
#     }
if (v0 == 0) {
b1 <- Mod(lam1) ^ 2 / (Mod(omega1) ^ 2 - Mod(lam1) ^ 2)
if (length(dim(Active)) == 2) Active <- array(Active, dim = c(q, N, N))
if (length(dim(p_star_mat)) == 2) p_star_mat <- array(p_star_mat, dim = c(q, N, N))
#         omega1 <- 2 * v1
#         lam1 <- 2i * v1 * slab.cor
for (j in 1:N) {
for (i in 1:N) {
no.active <- sum(Active[, i, j])
if (no.active > 0) {
x <- X[1:n, 1:q]
x_act <- data.matrix(as.matrix(x)[, Active[, i, j] == 1])
X_act <- data.matrix(X[, rep(Active[, i, j], 2) == 1])
XtYre <- crossprod(x_act, Yre[, i, j])
XtYim <- crossprod(x_act, Yim[, i, j])
# print("here")
# Dv <- create_Dmat_noncir(lam0, lam1, omega0, omega1, b0, b1,
#                          p_star = p_star_mat[,i, j])
Dv <- create_Dmat_noncir_cpp(lam0, lam1, omega0, omega1, b0, b1,
p_star_mat[,i, j])
# print("here")
# print(paste("Dv", Dv))
Gv <- create_Gmat_noncir_cpp(lam0, lam1, omega0, omega1, b0, b1,
p_star_mat[,i, j])
# print("here")
# print(paste("Gv", Gv))
# print("here")
XtX.cv <- crossprod(x_act)
regcoef <- M_beta_noncir(XtYre, XtYim, XtX.cv, Dv, Re(Gv), Im(Gv))
XtY <- crossprod(X_act, Ycube[, i, j])
# print(paste("XtY", XtY))
# print(regcoef)
Ssq <- crossprod(Ycube[, i, j]) - crossprod(XtY, c(Re(regcoef), Im(regcoef)))
# print(paste("crossprod(Y[, i, j] ", crossprod(Y[, i, j])))
# print(paste("crossprod(XtY, c(Re(regcoef), Im(regcoef)) ",
# crossprod(XtY, c(Re(regcoef), Im(regcoef)))))
# print(paste("Ssq ", Ssq))
Ssq_sum <- Ssq_sum + Ssq
# print(paste("Ssq_sum  ",Ssq_sum ))
XtX <- crossprod(X_act)
# print(XtX)
#                     cplx_to_real_cov <- function(Omega, Lam) {
#                         Vrr <- (0.5) * Re(Omega + Lam)
#                         Vii <- (0.5) * Re(Omega - Lam)
#                         Vri <- (0.5) * Im(-Omega + Lam)
#                         Vir <- (0.5) * Im(Omega + Lam)
#                         return(rbind(cbind(Vrr, Vri), cbind(Vir, Vii)))
#                     }
#
Sig.real <- cplx_to_real_cov(Omega = omega1, Lam = lam1)
# print(Sig.real)
# Dinv <- chol2inv(chol(D))
det.value <- (-0.5) * as.numeric(
determinant(XtX + chol2inv(chol(Sig.real)),
logarithm = TRUE)$modulus)
# print(paste("det.value  ", det.value))
XX_sum <- XX_sum + det.value
ddd <- (-0.5) * as.numeric(determinant(Sig.real,
logarithm = TRUE)$modulus)
# print(paste("ddd ",ddd))
dd_sum <- dd_sum + ddd
} else {
Ssq <- crossprod(Ycube[, i, j])
# print(paste("Ssq ", Ssq))
Ssq_sum <- Ssq_sum + Ssq
# print(paste("Ssq_sum  ",Ssq_sum ))
}
}
}
# print(paste("Ssq_sum  ",Ssq_sum))
print(paste("XX_sum  ", XX_sum))
# print(paste("dd_sum  ", dd_sum))
value <- XX_sum + dd_sum - ((0.5) * (N ^ 2 * nn) + a_sig) *
log(b_sig + Ssq_sum)
print(paste("value  ", value))
#         value <- XX_sum + dd_sum -  (N ^ 2 * n + a_sig) *
#             log(b_sig + .5 * Ssq_sum)
print(paste("log_prior  ", log_prior(Active, a, b, length(Active))))
value <- value + log_prior(Active, a, b, length(Active))
# print(paste("log_prior  ", log_prior(Active, a, b, length(Active))))
}
return(value)
}
sim2.em.cpp <- EM_spikecir_cpp_full(X.cplx, Y.cv, v0s, v1 = 1, epsilon = epsilon,
a_th = 1, b_th = 1, thre = thre[1],
spike.cor = 0, slab.cor = 0)
log_prior <- function (Gamma, a, b, NN) {
x <- sum(Gamma) + a
y <- NN - sum(Gamma) + b
# y = length(gamma) - sum(gamma) + b
# prior_val <- lbeta(x, y) - (lgamma(a) + lgamma(b) - lgamma(a+b))
prior_val <- lbeta(x, y) - log(beta(a, b))
# Stirling approximation
if(prior_val == "Inf" || prior_val == "-Inf"){
prior_val = 0.5 * log(2 * pi) + (x - 0.5) * log(x) +
(y - 0.5) * log(y) - (x + y - 0.5) * log(x + y)
}
return(prior_val)
}
sim2.em.cpp <- EM_spikecir_cpp_full(X.cplx, Y.cv, v0s, v1 = 1, epsilon = epsilon,
a_th = 1, b_th = 1, thre = thre[1],
spike.cor = 0, slab.cor = 0)
v0s <- 0.001 * 1:15
sim2.em.cpp <- EM_spikecir_cpp_full(X.cplx, Y.cv, v0s, v1 = 1, epsilon = epsilon,
a_th = 1, b_th = 1, thre = thre[1],
spike.cor = 0, slab.cor = 0)
par(mfrow = c(1, 3), omi = c(0, 0, 0, 0), mar = c(.1, .1, 1.5, .1))
EMVSbest(sim2.em.cpp)
png("./figures/sim2brainstr_cut.png", width = 1000, height = 350)
# Cut margins
par(mfrow = c(1, 3), mar = c(.1, .1, 1.5, .1))
layout(matrix(c(rep(1, 5), rep(2, 5), rep(3, 6)), nrow = 1, ncol = 16, byrow = TRUE))
cut.row.idx <- c(1:20, 77:96)
cut.col.idx <- c(1:15, 82:96)
img.cut <- data.mean.list$Mod[-cut.row.idx, -cut.col.idx] # dim = c(56, 66)
cex.pt <- 1
image(img.cut,
col = gray((0:96) / 96), axes = FALSE,
main = "True Strength")
true.strength.scale5.cut <- true.strength.scale5[-cut.row.idx, -cut.col.idx]
addTrueVoxelStr(true.strength.scale5.cut)
img_fmri(braindata = img.cut, output = sim2.em, thre = 0.5, v0s = v0s, v1 = v1,
iscplx = TRUE, isstr = TRUE, title = "CV Estimated Strength",
isbar = FALSE, iscut = TRUE, cex.pt = cex.pt)
img_fmri(braindata = img.cut, output = sim2.em.mod, thre = 0.5, v0s = v0s, v1 = v1,
iscplx = FALSE, isstr = TRUE, title = "MO Estimated Strength",
iscut = TRUE, cex.pt = cex.pt, isbar = TRUE)
dev.off()
################################################################################
# Complex-valued EMVS: Simulation study 2                                      #
# The code is based on circular normal and is in pure R environment            #
# Cheng-Han Yu, UC Santa Cruz                                                  #
################################################################################
rm(list = ls())
################################################################################
# Load associated required packages
################################################################################
library(Matrix)
library(mvtnorm)
library(neuRosim)
library(abind)
library(fields)
library(Hmisc)
library(memoise)
library(R.matlab)
################################################################################
# Source files for the algorithm functions and loading data (Y, X)
################################################################################
source("M_beta.R")
source("log_prior.R")
source("log_g_sig.R")
source("E_beta_binom.R")
source("M_theta.R")
source("M_sigma_sig.R")
source("EMVSbest.R")
source("EMVSmainfcn.R")
source("./data/loadData.R")
################################################################################
# Run MO and CV EM algorithms
################################################################################
# set parameters
################
q <- 1
nn <- n.time * 2
qq <- q * 2
v0s <- 0.006  # the optimal v0 chosen from a grid
v1 <- 1
epsilon <- 1e-3
# CV
###############
# EM_theta_sig_test <- memoise(EM_theta_sig)
sim2.em <- EM_theta_sig(X.cplx, Y.cv, v0s, v1, epsilon = epsilon,
a = 1, b = 1, thre = 0.5)
# sim2.em.test <- EM_theta_sig(X.cplx, Y.cv, v0s, v1, epsilon = epsilon,
#                         a = 1, b = 1, thre = 0.5)
# MO
##########
sim2.em.mod <- EMmod_theta_sig(x.mod, Y.mod, v0s, v1, epsilon = epsilon,
a = 1, b = 1, thre = 0.5)
png("./figures/sim2brainstr_cut.png", width = 1000, height = 350)
# Cut margins
par(mfrow = c(1, 3), mar = c(.1, .1, 1.5, .1))
layout(matrix(c(rep(1, 5), rep(2, 5), rep(3, 6)), nrow = 1, ncol = 16, byrow = TRUE))
cut.row.idx <- c(1:20, 77:96)
cut.col.idx <- c(1:15, 82:96)
img.cut <- data.mean.list$Mod[-cut.row.idx, -cut.col.idx] # dim = c(56, 66)
cex.pt <- 1
image(img.cut,
col = gray((0:96) / 96), axes = FALSE,
main = "True Strength")
true.strength.scale5.cut <- true.strength.scale5[-cut.row.idx, -cut.col.idx]
addTrueVoxelStr(true.strength.scale5.cut)
img_fmri(braindata = img.cut, output = sim2.em, thre = 0.5, v0s = v0s, v1 = v1,
iscplx = TRUE, isstr = TRUE, title = "CV Estimated Strength",
isbar = FALSE, iscut = TRUE, cex.pt = cex.pt)
img_fmri(braindata = img.cut, output = sim2.em.mod, thre = 0.5, v0s = v0s, v1 = v1,
iscplx = FALSE, isstr = TRUE, title = "MO Estimated Strength",
iscut = TRUE, cex.pt = cex.pt, isbar = TRUE)
dev.off()
data.mean.list <- lapply(list('Re' = dataR.r, 'Im' = dataI.r, 'Mod' = dataM.r,
'Arg' = dataA.r), function(x) apply(x, c(2, 3), mean))
png("./figures/sim2brainstr_cut.png", width = 1000, height = 350)
# Cut margins
par(mfrow = c(1, 3), mar = c(.1, .1, 1.5, .1))
layout(matrix(c(rep(1, 5), rep(2, 5), rep(3, 6)), nrow = 1, ncol = 16, byrow = TRUE))
cut.row.idx <- c(1:20, 77:96)
cut.col.idx <- c(1:15, 82:96)
img.cut <- data.mean.list$Mod[-cut.row.idx, -cut.col.idx] # dim = c(56, 66)
cex.pt <- 1
image(img.cut,
col = gray((0:96) / 96), axes = FALSE,
main = "True Strength")
true.strength.scale5.cut <- true.strength.scale5[-cut.row.idx, -cut.col.idx]
addTrueVoxelStr(true.strength.scale5.cut)
img_fmri(braindata = img.cut, output = sim2.em, thre = 0.5, v0s = v0s, v1 = v1,
iscplx = TRUE, isstr = TRUE, title = "CV Estimated Strength",
isbar = FALSE, iscut = TRUE, cex.pt = cex.pt)
img_fmri(braindata = img.cut, output = sim2.em.mod, thre = 0.5, v0s = v0s, v1 = v1,
iscplx = FALSE, isstr = TRUE, title = "MO Estimated Strength",
iscut = TRUE, cex.pt = cex.pt, isbar = TRUE)
